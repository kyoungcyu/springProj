<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:security="http://www.springframework.org/schema/security" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/beans 
		https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<bean id="customAccessDenied"
	 class="kr.or.ddit.security.CustomAccessDeniedHandler"></bean>
	 
	<!-- 비밀번호를 암호화하는 것을 사용자 정의로 처리해보자 -->
	<bean id="customPasswordEncoder"
	 class="kr.or.ddit.security.CustomNoOpPasswordEncoder"></bean>
	 
	<!-- 사용자가 이미 정해놓은 테이블과 컬럼명으로 인증/인가를 처리해보자 -->
	<bean id="customUserDetailsService" 
		class="kr.or.ddit.security.CustomUserDetailsService">
	</bean>
	
	<bean id="customLoginSuccess" 
		class="kr.or.ddit.security.CustomLoginSuccessHandler">
	</bean>
	
	
	<!--  비지니스 테이블 핸들러 ?  -->
<!-- 	<bean id="bsAccessDenied" -->
<!-- 	 class="kr.or.ddit.security.BsAccessDeniedHandler"></bean> -->
	 
	<!--  비지니스 테이블 로그인 핸들러 -->
<!-- 	<bean id="bsLoginSuccess"  -->
<!-- 		class="kr.or.ddit.security.BsLoginSuccessHandler"> -->
<!-- 	</bean> -->
	
	<!-- 비지니스 태이블 아이디  시큐리티 핸들러  -->
<!-- 	<bean id="bsUserDetailsService"  -->
<!-- 		class="kr.or.ddit.security.BsUserDetailsService"> -->
<!-- 	</bean> -->
	
<!-- 	비밀번호를 암호화하는 것을 사용자 정의로 처리해보자 --> 
<!-- 	<bean id="bsPasswordEncoder" -->
<!-- 	 class="kr.or.ddit.security.BsNoOpPasswordEncoder"></bean> -->
	
	
	<security:http>
<!-- 		<security:intercept-url pattern="/board/list" access="permitAll" />모두 허용 -->
<!-- 		<security:intercept-url pattern="/board/register" access="hasRole('ROLE_MEMBER')" />회원만 허용 -->
<!-- 		<security:intercept-url pattern="/notice/list" access="permitAll" />모두 허용 -->
<!-- 		<security:intercept-url pattern="/notice/register" access="hasRole('ROLE_ADMIN')" />관리자만 허용 -->
	
		<!-- 로그인 시 시큐리티가 제공해주는 기본 폼 기반 인증 기능을 사용 / 아이디, 비번, submit버튼-->
<!-- 		<security:form-login  /> -->
		<!-- 사용자가 정의한 로그인 페이지 -->
		<security:form-login login-page="/login" 
		authentication-success-handler-ref="customLoginSuccess"/>
		
		<!-- bs 로그인 핸들러  -->
<!-- 		<security:form-login login-page="/login"  -->
<!-- 		authentication-success-handler-ref="bsLoginSuccess"/> -->
		
		<!-- 접근 거부 처리자의 URI지정 -->
<!-- 		<security:access-denied-handler error-page="/accessError" /> -->
		<!-- 사용자 정의 접근 거부 처리자 : 
		접근 거부가 발생한 상황에 단순 메시지 처리 이상의 다양한 처리를 하고자 한다면 직접 구현할 수 있음
		 -->
		<security:access-denied-handler ref="customAccessDenied" />

<!-- 		<security:access-denied-handler ref="bsAccessDenied" /> -->
		
		<!-- 자동로그인
		dataSource를 통해 Database의 약속된 테이블(PEERSISTENT_LOGINS)을 이용하여
		기존 로그인 정보를 기록함 
		token-validity-seconds : 쿠키의 유효시간(초) 604800초는 7일
		-->
		
		<security:remember-me data-source-ref="dataSource"
			token-validity-seconds="604800"/> 
		
		<!-- 로그아웃 처리
		로그아웃을 위한 URI를 지정하고, 로그아웃 처리 후에 별도의 작업을 하기 위해 
		사용자가 직접 구현한 처리자를 등록할 수 있음		
		session.invalidate() : 세션 종료
		
		invalidate-session="true" : 로그아웃 후에 세션을 무효화
		
		로그아웃을 하면 자동 로그인에 사용된 쿠키도 함께 삭제해줌
		 -->
		<security:logout logout-url="/logout" invalidate-session="true"
			delete-cookies="remember-me,JSESSION_ID"  />
	</security:http>
	
	<!-- authentication : 인증(로그인)
	스프링 시큐리티 5버전부터는 패스워드 암호화 처리기를 반드시 이용하도록 변경됨.
	암호화 처리기를 사용하지 않도록 noop 문자열을 비밀번호 앞에 사용
	 -->
	<security:authentication-manager>
		<!-- 사용자 정의 테이블과 컬럼을 사용해보자 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
		<!-- 메모리상에 아이디와 비밀번호를 지정하고 로그인을 처리. 지정된 아이디와 비밀번호로 로그인이 가능하도록 설정 -->
			<!-- 데이터 소스를 지정 
			dataSource : root-context.xml의 bean의 id
			-->
<!-- 			<security:jdbc-user-service data-source-ref="dataSource"/> -->
<!-- 			<security:jdbc-user-service data-source-ref="dataSource" -->
<!-- 			users-by-username-query="SELECT MEM_ID, MEM_PASS, ENABLED FROM MEMBER WHERE MEM_ID = ?"  -->
<!-- 			authorities-by-username-query="SELECT A.MEM_ID, B.AUTH FROM MEMBER A, MEMBER_AUTH B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_ID = ?" -->
<!-- 			/> -->
			<!-- 사용자가 정의한 비밀번호 암호화 처리기를 지정 --> 
			<security:password-encoder ref="customPasswordEncoder" />
<!-- 			<security:user-service> -->
				<!-- member라는 아이디/java라는 비밀번호를 갖고 있는 회원(ROLE_MEMBER) -->
<!-- 				<security:user name="member" password="{noop}java" authorities="ROLE_MEMBER" /> -->
				<!-- admin라는 아이디/java라는 비밀번호를 갖고 있는 관리자(ROLE_MEMBER,ROLE_ADMIN) -->
<!-- 				<security:user name="admin" password="{noop}java" authorities="ROLE_MEMBER,ROLE_ADMIN" /> -->
<!-- 			</security:user-service> -->
		</security:authentication-provider>
	</security:authentication-manager>
	
	
<!-- 	<security:authentication-manager> -->
<!-- 		사용자 정의 테이블과 컬럼을 사용해보자  -->
<!-- 		<security:authentication-provider user-service-ref="bsUserDetailsService"> -->
		<!-- 메모리상에 아이디와 비밀번호를 지정하고 로그인을 처리. 지정된 아이디와 비밀번호로 로그인이 가능하도록 설정 -->
<!-- 			데이터 소스를 지정  -->
<!-- 			dataSource : root-context.xml의 bean의 id -->
<!-- 			 -->
<!-- 			<security:jdbc-user-service data-source-ref="dataSource"/> -->
<!-- 			<security:jdbc-user-service data-source-ref="dataSource" -->
<!-- 			users-by-username-query="SELECT MEM_ID, MEM_PASS, ENABLED FROM MEMBER WHERE MEM_ID = ?"  -->
<!-- 			authorities-by-username-query="SELECT A.MEM_ID, B.AUTH FROM MEMBER A, MEMBER_AUTH B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_ID = ?" -->
<!-- 			/> -->
			<!-- 사용자가 정의한 비밀번호 암호화 처리기를 지정  -->
<!-- 			<security:password-encoder ref="bsPasswordEncoder" /> -->
<!-- 			<security:user-service> -->
<!-- 				member라는 아이디/java라는 비밀번호를 갖고 있는 회원(ROLE_MEMBER) -->
<!-- 				<security:user name="member" password="{noop}java" authorities="ROLE_MEMBER" /> -->
<!-- 				admin라는 아이디/java라는 비밀번호를 갖고 있는 관리자(ROLE_MEMBER,ROLE_ADMIN) -->
<!-- 				<security:user name="admin" password="{noop}java" authorities="ROLE_MEMBER,ROLE_ADMIN" /> -->
<!-- 			</security:user-service> -->
<!-- 		</security:authentication-provider> -->
<!-- 	</security:authentication-manager> -->
	
</beans>













